local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/shlexware/Orion/main/source')))()
local Window = OrionLib:MakeWindow({
    Name = "Katanga Hub | Anime Power Evolution |", 
    IntroText = "Katanga Hub", 
    SaveConfig = true, 
    ConfigFolder = "Test"
})

-- Variables globales
_G.autoclick = false
_G.selectedMob = nil
_G.farmSelectedMob = false
_G.selectedMap = nil
_G.autoRank = false -- Variable para controlar el AutoRank
_G.autoStars = false -- Variable para controlar el AutoStars
_G.selectedStar = nil -- Variable para almacenar la estrella seleccionada
_G.equipBest = false -- Variable para controlar el EquipBest
_G.autoQuest = false -- Variable para controlar el AutoQuest
_G.antiAFK = true -- Variable para controlar el Anti-AFK
_G.autoUpgrades = false -- Variable para controlar el AutoUpgrades

-- Opciones específicas para los mobs en cada pestaña
local mobOptions = {
    ["Farm"] = {"Nofarm","Clown", "Kazori", "Marine", "Rene", "Daflogo"},
    ["Ninja Village"] = {"Nofarm","Itan", "Kaisam", "Paein", "Obuto", "Oromaru", "Madra"},
    ["Dragon Sanctuary"] = {"Nofarm","Androida", "Nappo", "Perfect Cello", "Radoz", "Boo Mini", "Beros"}
}

-- Función para realizar autoclick
function autoClick()
    while _G.autoclick do
        -- Enviar el comando de ataque al servidor
        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.Click:FireServer()
        wait(0.2) -- Controla la velocidad de clic
    end
end

-- Función para teletransportar al jugador a la posición de la HitBox del mob seleccionado
function teleportToMob(mobName)
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local playerHRP = player.Character.HumanoidRootPart

        -- Buscar el mob seleccionado en las carpetas __ENNEMIES["1"], __ENNEMIES["2"], y __ENNEMIES["3"]
        for i = 1, 3 do
            local enemyFolder = workspace.__ENNEMIES[tostring(i)]
            if enemyFolder then
                local mobs = enemyFolder:GetChildren()
                for _, mob in ipairs(mobs) do
                    if mob.Name == mobName then
                        local hitBox = mob:FindFirstChild("HitBox")
                        if hitBox and hitBox:IsA("Part") then
                            -- Teletransportar al jugador a la posición de la HitBox
                            local success, errorMsg = pcall(function()
                                playerHRP.CFrame = hitBox.CFrame
                            end)
                            if not success then
                                print("Error durante el teletransporte: " .. errorMsg)
                            end
                            return -- Salir de la función una vez que se haya teletransportado con éxito
                        end
                    end
                end
                print("No se encontró HitBox para el mob: " .. mobName .. " en __ENNEMIES[" .. i .. "]")
            else
                print("__ENNEMIES[" .. i .. "] no encontrado")
            end
        end
    else
        print("Jugador o HumanoidRootPart no disponible")
    end
end

-- Función para teletransportar y atacar a los mobs seleccionados basados en el CFrame
function teleportAndAttackMobs()
    while _G.farmSelectedMob and _G.selectedMob do
        teleportToMob(_G.selectedMob)

        -- Enviar comando de ataque
        local attackArgs = {
            [1] = "AttackMob",
            [2] = _G.selectedMob
        }
        local attackSuccess, attackErrorMsg = pcall(function()
            game:GetService("ReplicatedStorage").Bridge:FireServer(unpack(attackArgs))
        end)
        if not attackSuccess then
            print("Error durante el ataque: " .. attackErrorMsg)
        end

        wait(1.5) -- Aumenta el tiempo de espera entre teletransportes
    end
end

-- Función para ejecutar el comando RankUp
function rankUp()
    local args = {
        [1] = "RankUp"
    }
    local success, errorMsg = pcall(function()
        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(args))
    end)
    if not success then
        print("Error durante el RankUp: " .. errorMsg)
    end
end

-- Función para verificar la proximidad al UIZonePart
function isNearUIZonePart()
    local player = game.Players.LocalPlayer
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local playerHRP = player.Character.HumanoidRootPart
        local uiZonePart = workspace.__STARS.Pirate.UIZonePart
        if uiZonePart then
            local distance = (playerHRP.Position - uiZonePart.Position).magnitude
            return distance < 50 -- Ajusta el rango de proximidad según sea necesario
        else
            print("UIZonePart no encontrado")
        end
    else
        print("Jugador o HumanoidRootPart no disponible")
    end
    return false
end

-- Función para manejar EquipBest en un bucle
function handleEquipBest()
    while _G.equipBest do
        local args = {
            [1] = "EquipBest"
        }
        local success, errorMsg = pcall(function()
            game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(args))
        end)
        if not success then
            print("Error durante EquipBest: " .. errorMsg)
        end
        wait(60) -- Espera de 60 segundos entre cada ejecución del comando
    end
end

-- Función para manejar AutoQuest en un bucle
function handleAutoQuest()
    while _G.autoQuest do
        local maps = {"Oy Piece", "Ninja Village", "Dragon Sanctuary"}

        for _, mapName in ipairs(maps) do
            -- Ejecutar el comando inicial
            local questArgsStart = {
                [1] = mapName
            }
            local successStart, errorMsgStart = pcall(function()
                game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RF.QuestHandle:InvokeServer(unpack(questArgsStart))
            end)
            if not successStart then
                print("Error durante el comando de inicio de quest para " .. mapName .. ": " .. errorMsgStart)
            end

            wait(5) -- Espera de 5 segundos entre comandos

            -- Ejecutar el comando con el segundo argumento `true`
            local questArgsTrue = {
                [1] = mapName,
                [2] = true
            }
            local successTrue, errorMsgTrue = pcall(function()
                game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RF.QuestHandle:InvokeServer(unpack(questArgsTrue))
            end)
            if not successTrue then
                print("Error durante el comando de quest con true para " .. mapName .. ": " .. errorMsgTrue)
            end
        end

        wait(15) -- Espera de 60 segundos antes de repetir el ciclo
    end
end

-- Función para crear una pestaña con los controles especificados
function createTab(tabName, showAutoClick)
    local Tab = Window:MakeTab({
        Name = tabName,
        Icon = "rbxassetid://4483345998",
        PremiumOnly = false
    })

    Tab:AddLabel("FARM")

    -- Dropdown para seleccionar el mob
    local mobDropdown = Tab:AddDropdown({
        Name = "Select Mob",
        Default = "...",
        Options = mobOptions[tabName] or {}, -- Opciones específicas para los mobs en esta pestaña
        Callback = function(Value)
            print("Mob Seleccionado: " .. Value)
            _G.selectedMob = Value  -- Guardamos el mob seleccionado

            -- Comenzar a atacar al mob si el toggle está activado
            if _G.farmSelectedMob and _G.selectedMob then
                teleportAndAttackMobs()
            end
        end    
    })

    -- Toggle para habilitar el farm automático del mob seleccionado
    Tab:AddToggle({
        Name = "FarmSelectedMob",
        Default = false,
        Callback = function(Value)
            _G.farmSelectedMob = Value
            print("FarmSelectedMob: " .. tostring(Value))

            -- Comenzar o detener el ataque al mob seleccionado
            if Value and _G.selectedMob then
                teleportAndAttackMobs()
            end
        end    
    })

    if showAutoClick then
        -- Toggle para habilitar o deshabilitar el autoclick
        Tab:AddToggle({
            Name = "AutoClick",
            Default = false,
            Callback = function(Value)
                _G.autoclick = Value
                print("AutoClick: " .. tostring(Value))

                -- Comenzar o detener el autoclick
                if Value then
                    autoClick()
                end
            end    
        })
    end
end

-- Crear las pestañas
createTab("Farm", true)
createTab("Ninja Village", false)
createTab("Dragon Santuary", false)

-- Crear la pestaña Auto
local autoTab = Window:MakeTab({
    Name = "Auto",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Toggle para habilitar el AutoRank
autoTab:AddToggle({
    Name = "AutoRank",
    Default = false,
    Callback = function(Value)
        _G.autoRank = Value
        print("AutoRank: " .. tostring(Value))

        -- Ejecutar RankUp en un bucle si AutoRank está habilitado
        while _G.autoRank do
            rankUp()
            wait(80) -- Espera de 80 segundos entre cada RankUp
        end
    end    
})

-- Toggle para habilitar el EquipBest
autoTab:AddToggle({
    Name = "EquipBest",
    Default = false,
    Callback = function(Value)
        print("EquipBest: " .. tostring(Value))
        if Value then
            local args = {
                [1] = "EquipBest"
            }
            local success, errorMsg = pcall(function()
                game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(args))
            end)
            if not success then
                print("Error durante EquipBest: " .. errorMsg)
            end
        end
    end    
})

-- Toggle para AutoQuest
autoTab:AddToggle({
    Name = "AutoQuest",
    Default = false,
    Callback = function(Value)
        _G.autoQuest = Value
        print("AutoQuest: " .. tostring(Value))
        if Value then
            spawn(function()
                handleAutoQuest()
            end)
        end
    end
})

-- Toggle para AutoUpgrades
autoTab:AddToggle({
    Name = "AutoUpgrades",
    Default = false,
    Callback = function(Value)
        _G.autoUpgrades = Value
        print("AutoUpgrades: " .. tostring(Value))
        if Value then
            spawn(function()
                while _G.autoUpgrades do
                    local upgradeArgs = {
                        [1] = "Upgrade",
                        [2] = "PowerMultiplier"
                    }
                    local success, errorMsg = pcall(function()
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(upgradeArgs))
                    end)
                    if not success then
                        print("Error durante el upgrade PowerMultiplier: " .. errorMsg)
                    end

                    local upgradeArgs2 = {
                        [1] = "Upgrade",
                        [2] = "MagnetRange"
                    }
                    local success2, errorMsg2 = pcall(function()
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(upgradeArgs2))
                    end)
                    if not success2 then
                        print("Error durante el upgrade MagnetRange: " .. errorMsg2)
                    end

                    local upgradeArgs3 = {
                        [1] = "Upgrade",
                        [2] = "GemsMultiplier"
                    }
                    local success3, errorMsg3 = pcall(function()
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(upgradeArgs3))
                    end)
                    if not success3 then
                        print("Error durante el upgrade GemsMultiplier: " .. errorMsg3)
                    end

                    local upgradeArgs4 = {
                        [1] = "Upgrade",
                        [2] = "DamageMultiplier"
                    }
                    local success4, errorMsg4 = pcall(function()
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(upgradeArgs4))
                    end)
                    if not success4 then
                        print("Error durante el upgrade DamageMultiplier: " .. errorMsg4)
                    end

                    local upgradeArgs5 = {
                        [1] = "Upgrade",
                        [2] = "ClickSpeed"
                    }
                    local success5, errorMsg5 = pcall(function()
                        game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.MainRemote:FireServer(unpack(upgradeArgs5))
                    end)
                    if not success5 then
                        print("Error durante el upgrade ClickSpeed: " .. errorMsg5)
                    end

                    wait(120) -- Espera de 120 segundos entre cada intento de Upgrade
                end
            end)
        end
    end
})

-- Crear la pestaña Stars
local starsTab = Window:MakeTab({
    Name = "Stars",
    Icon = "rbxassetid://4483345998",
    PremiumOnly = false
})

-- Dropdown vacío en la pestaña Stars
local starDropdown = starsTab:AddDropdown({
    Name = "Select Star",
    Default = "...",
    Options = {"Pirate"}, -- Opciones iniciales vacías
    Callback = function(Value)
        print("Star Seleccionado: " .. Value)
        _G.selectedStar = Value  -- Guardamos la estrella seleccionada
    end
})

-- Toggle para habilitar el AutoStars
starsTab:AddToggle({
    Name = "AutoStars",
    Default = false,
    Callback = function(Value)
        _G.autoStars = Value
        print("AutoStars: " .. tostring(Value))
        if Value then
            -- Ejecutar el comando para abrir estrellas en un bucle si AutoStars está habilitado
            spawn(function()
                while _G.autoStars and _G.selectedStar do
                    if isNearUIZonePart() then
                        local args = {
                            [1] = "OpenStar",
                            [2] = "Max",
                            [3] = _G.selectedStar,
                            [4] = false
                        }
                        local success, errorMsg = pcall(function()
                            game:GetService("ReplicatedStorage").Packages.Knit.Services.RemotesService.RE.OpenStars:FireServer(unpack(args))
                        end)
                        if not success then
                            print("Error durante el comando OpenStars: " .. errorMsg)
                        end
                    else
                        print("No estás cerca del UIZonePart")
                    end
                    wait(10) -- Ajusta el tiempo de espera según sea necesario
                end
            end)
        end
    end    
})

-- Notificación de bienvenida
OrionLib:MakeNotification({
    Name = "Welcome!",
    Content = "Welcome, " .. game.Players.LocalPlayer.Name .. "!",
    Image = "rbxassetid://4483345998",
    Time = 5
})

OrionLib:Init()
